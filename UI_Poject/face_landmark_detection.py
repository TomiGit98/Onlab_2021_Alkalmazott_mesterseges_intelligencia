# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'face_landmark_detection.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import dlib
import cv2

import main_menu

from PyQt5 import QtCore, QtGui, QtWidgets, Qt
from PyQt5.QtGui import QPixmap, QPainter
from PyQt5.QtWidgets import QFileDialog

import time

import speech_recognition as sr

import speech_recognizer_system


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(658, 658)
        MainWindow.setStyleSheet("background-color: #252525")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(10, 0, 641, 601))
        self.gridLayoutWidget.setMinimumSize(QtCore.QSize(641, 601))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setVerticalSpacing(1)
        self.gridLayout_2.setObjectName("gridLayout_2")
        spacerItem = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        self.gridLayout_2.addItem(spacerItem, 6, 0, 1, 1)
        self.findButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.findButton.setMinimumSize(QtCore.QSize(0, 0))
        self.findButton.setStyleSheet("QPushButton#findButton {\n"
"    background-color: red;\n"
"    border-style: ;outset\n"
"    border-width: 0px;\n"
"    border-radius: 10px;\n"
"    border-color: #39FF14;\n"
"    font: bold 14px;\n"
"    min-width: 10em;\n"
"    padding: 6px;\n"
"}")
        self.findButton.setObjectName("findButton")
        self.gridLayout_2.addWidget(self.findButton, 5, 0, 1, 1, QtCore.Qt.AlignVCenter)
        self.detectLandmarkButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.detectLandmarkButton.setEnabled(True)
        self.detectLandmarkButton.setMinimumSize(QtCore.QSize(639, 0))
        self.detectLandmarkButton.setStyleSheet("QPushButton#smileButton {\n"
"    background-color: #39FF14;\n"
"    border-style: ;outset\n"
"    border-width: 0px;\n"
"    border-radius: 10px;\n"
"    border-color: #39FF14;\n"
"    font: bold 14px;\n"
"    min-width: 2em;\n"
"    padding: 6px;\n"
"}")
        self.detectLandmarkButton.setObjectName("smileButton")
        self.gridLayout_2.addWidget(self.detectLandmarkButton, 3, 0, 1, 1)
        self.backToMenuButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.backToMenuButton.sizePolicy().hasHeightForWidth())
        self.backToMenuButton.setSizePolicy(sizePolicy)
        self.backToMenuButton.setStyleSheet("QPushButton#backToMenuButton {\n"
"    background-color: #CBCBCB;\n"
"    border-style: ;outset\n"
"    border-width: 0px;\n"
"    border-radius: 10px;\n"
"    border-color: #39FF14;\n"
"    font: bold 14px;\n"
"    min-width: 2em;\n"
"    padding: 6px;\n"
"}")
        self.backToMenuButton.setIconSize(QtCore.QSize(40, 40))
        self.backToMenuButton.setObjectName("backToMenuButton")
        self.gridLayout_2.addWidget(self.backToMenuButton, 7, 0, 1, 1, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignBottom)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.minusButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.minusButton.setStyleSheet("QPushButton#minusButton {\n"
"    background-color: yellow;\n"
"    border-style: ;outset\n"
"    border-width: 0px;\n"
"    border-radius: 10px;\n"
"    border-color: #39FF14;\n"
"    font: bold 14px;\n"
"    min-width: 2em;\n"
"    padding: 6px;\n"
"}")
        self.minusButton.setObjectName("minusButton")
        self.horizontalLayout.addWidget(self.minusButton, 0, QtCore.Qt.AlignLeft)
        self.lineEdit = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.setStyleSheet("background-color: white")
        self.lineEdit.setAlignment(Qt.Qt.AlignCenter)
        self.horizontalLayout.addWidget(self.lineEdit, 0, QtCore.Qt.AlignVCenter)
        self.plusButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.plusButton.setStyleSheet("QPushButton#plusButton {\n"
"    background-color: yellow;\n"
"    border-style: ;outset\n"
"    border-width: 0px;\n"
"    border-radius: 10px;\n"
"    border-color: #39FF14;\n"
"    font: bold 14px;\n"
"    min-width: 2em;\n"
"    padding: 6px;\n"
"}")
        self.plusButton.setObjectName("plusButton")
        self.horizontalLayout.addWidget(self.plusButton, 0, QtCore.Qt.AlignRight)
        self.gridLayout_2.addLayout(self.horizontalLayout, 4, 0, 1, 1)
        self.image = QtWidgets.QLabel(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.image.sizePolicy().hasHeightForWidth())
        self.image.setSizePolicy(sizePolicy)
        self.image.setMinimumSize(QtCore.QSize(639, 466))
        self.image.setAutoFillBackground(False)
        self.image.setText("")
        self.image.setScaledContents(False)
        self.image.setObjectName("image")
        self.gridLayout_2.addWidget(self.image, 1, 0, 1, 1, QtCore.Qt.AlignHCenter)
        self.gridLayout_2.setRowStretch(0, 7)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 658, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)


        #
        self.findButton.clicked.connect(self.openFile)
        self.detectLandmarkButton.clicked.connect(self.detectLandmark)
        self.minusButton.clicked.connect(self.minusButtonPush)
        self.plusButton.clicked.connect(self.plusButtonPush)
        self.backToMenuButton.clicked.connect(self.bactToMainMenu)
        self.startRecognizer()
        #

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.findButton.setText(_translate("MainWindow", "Open File"))
        self.detectLandmarkButton.setText(_translate("MainWindow", "Detect Landmark"))
        self.backToMenuButton.setText(_translate("MainWindow", "Back To Menu"))
        self.minusButton.setText(_translate("MainWindow", "-"))
        self.plusButton.setText(_translate("MainWindow", "+"))


    def minusButtonPush(self):
        print(self.lineEdit.text())
        if self.lineEdit.text().__eq__(""):
            print("Empty")
            self.lineEdit.setText("0")
        else:
            if(self.lineEdit.text().__eq__("0")):
                return
            else:
                elem = int(self.lineEdit.text()) - 1
                self.lineEdit.setText(elem.__str__())

    def plusButtonPush(self):
        print(self.lineEdit.text())
        if self.lineEdit.text().__eq__(""):
            print("Empty")
            self.lineEdit.setText("1")
        else:
            if(self.lineEdit.text().__eq__("68")):
                return
            else:
                elem = int(self.lineEdit.text()) + 1
                self.lineEdit.setText(elem.__str__())


    def openFile(self):
        print("Open File")
        file_name, _ = QFileDialog.getOpenFileName(None, 'Open Image File', r"D:\\Python_projects\\ONLABOR\\UI_Poject",
                                                   "Image files (*.jpg *.jpeg *.gif)")

        print(file_name)
        if (file_name != ""):
            self.currentlyPresentedImageURL = file_name
            print(self.currentlyPresentedImageURL)

            pixmap = QPixmap(file_name)
            temp_w = pixmap.width()
            temp_h = pixmap.height()
            print("width: " + str(temp_w))
            print("height: " + str(temp_h))
            temp_w, temp_h = self.resizeImage(pixmap.width(), pixmap.height())
            print("After resize")
            print("width: " + str(temp_w))
            print("height: " + str(temp_h))
            pixmap = pixmap.scaled(temp_w, temp_h)
            self.image.setPixmap(pixmap)
            print("Image width: " + str(self.image.width()))
            print("Image height: " + str(self.image.height()))
            self.image.setAlignment(Qt.Qt.AlignCenter)
        else:
            print("Nem nyitottál meg fájlt")

    def bactToMainMenu(self):
        print("Back")
        u = main_menu.Ui_MainMenu()
        u.setupUi(MainWindow)
        MainWindow.show()


    def detectLandmark(self):
        if(not self.lineEdit.text().__eq__("")):

            hog_face_detector = dlib.get_frontal_face_detector()

            dlib_facelandmark = dlib.shape_predictor("Landmark/shape_predictor_68_face_landmarks.dat")

            minimum_number = 0
            maximum_number = int(self.lineEdit.text())

            self.painter = QPainter(self.image)

            img = cv2.imread(self.currentlyPresentedImageURL)
            print(self.currentlyPresentedImageURL)

            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

            faces = hog_face_detector(gray)
            for face in faces:
                face_landmarks = dlib_facelandmark(gray, face)

                for n in range(minimum_number, maximum_number):
                    x = face_landmarks.part(n).x
                    y = face_landmarks.part(n).y
                    cv2.circle(img, (x, y), 7, (255, 0, 0), 2)


            # cv2.imshow("Face Landmarks", img)
            cv2.imwrite('Landmark/FaceLandmark/faceLandmark.jpg', img)
            self.pixmax = QtGui.QPixmap('Landmark/FaceLandmark/faceLandmark.jpg')
            temp_w, temp_h = self.resizeImage(self.pixmax.width(), self.pixmax.height())
            self.pixmax = self.pixmax.scaled(temp_w.__int__(), temp_h.__int__())
            self.image.setAlignment(Qt.Qt.AlignCenter)
            self.image.setPixmap(self.pixmax)
            cv2.waitKey(0)

    def resizeImage(self, width, height):
        new_width, new_height, multiplier = 0, 0, 0
        if width > self.image.width() or height > self.image.height():
            for x in range(1000, 0, -1):
                new_width = width * (x / 1000)
                new_height = height * (x / 1000)
                if new_width <= self.image.width() and new_height <= self.image.height():
                    return new_width, new_height
        else:
            for x in range(1, 1000, 1):
                multiplier = 1 + (x / 100)
                new_width = width * multiplier
                new_height = height * multiplier
                print("width: " + str(new_width))
                print("height: " + str(new_height))
                if new_width > self.image.width() or new_height > self.image.height():
                    multiplier = 1 + ((x-1) / 100)
                    return width * multiplier, height * multiplier


    def processSpeech(self, word):
        if(word == "back" or word == "beck" or word == "Beck" or word == "Back"):
            self.backToMenuButton.click()
        elif(word == "plus" or word == "loose" or word == "Plus"):
            self.plusButton.click()
        elif "minus" in word or "-" in word:
            self.minusButton.click()
        elif "open" in word or "Open" in word:
            self.findButton.click()
        elif "detect" in word or "Detect" in word or "landmark" in word or "Landmark" in word:
            self.detectLandmarkButton.click()


    # this is called from the background thread
    def callback(self, recognizer, audio):
        # received audio data, now we'll recognize it using Google Speech Recognition
        try:
            # for testing purposes, we're just using the default API key
            # to use another API key, use `r.recognize_google(audio, key="GOOGLE_SPEECH_RECOGNITION_API_KEY")`
            # instead of `r.recognize_google(audio)`
            print("Google Speech Recognition thinks you said " + recognizer.recognize_google(audio))
            self.processSpeech(recognizer.recognize_google(audio))
            # self.backToMenuButton.click()
        except sr.UnknownValueError:
            print("Google Speech Recognition could not understand audio")
        except sr.RequestError as e:
            print("Could not request results from Google Speech Recognition service; {0}".format(e))

    def startRecognizer(self):
        print("Start Recognizer")
        r = sr.Recognizer()
        m = sr.Microphone()
        with m as source:
            r.adjust_for_ambient_noise(source)
        stop_listening = r.listen_in_background(m, self.callback)
        # stop_listening(wait_for_stop=False)
        # print("Stop Recognizer")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()

    sys.exit(app.exec_())
